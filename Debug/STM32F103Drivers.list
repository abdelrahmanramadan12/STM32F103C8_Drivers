
STM32F103Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000728  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000858  08000858  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000858  08000858  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000858  08000858  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000858  08000858  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  08000878  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000878  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f63  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000455  00000000  00000000  00020fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00021440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c3  00000000  00000000  00021560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000693  00000000  00000000  00021623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c87  00000000  00000000  00021cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004be9  00000000  00000000  0002293d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000035c  00000000  00000000  00027528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00027884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000840 	.word	0x08000840

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000840 	.word	0x08000840

08000170 <GPIO_u8PinInit>:
*/

static  GPIO_RegDef_t *GPIO_PORT_Arr [NUM_OF_PORTS]={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF};

uint8_t GPIO_u8PinInit(const GPIO_PinConfig_t*  PinConfig)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t  local_u8ErrorState = STD_TYPES_OK;
 8000178:	2301      	movs	r3, #1
 800017a:	73fb      	strb	r3, [r7, #15]
	if (PinConfig!= NULL)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f000 80e3 	beq.w	800034a <GPIO_u8PinInit+0x1da>
	{
		if ((PinConfig->port < NUM_OF_PORTS)&&(PinConfig->PinNum < NUM_OF_PINS))
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b05      	cmp	r3, #5
 800018a:	f200 80db 	bhi.w	8000344 <GPIO_u8PinInit+0x1d4>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	785b      	ldrb	r3, [r3, #1]
 8000192:	2b0f      	cmp	r3, #15
 8000194:	f200 80d6 	bhi.w	8000344 <GPIO_u8PinInit+0x1d4>
		{
			uint8_t _u8RegNum=(PinConfig->PinNum/8);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	785b      	ldrb	r3, [r3, #1]
 800019c:	08db      	lsrs	r3, r3, #3
 800019e:	73bb      	strb	r3, [r7, #14]
			uint8_t _u8BitNum=(PinConfig->PinNum%8);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	785b      	ldrb	r3, [r3, #1]
 80001a4:	f003 0307 	and.w	r3, r3, #7
 80001a8:	737b      	strb	r3, [r7, #13]

			switch (_u8RegNum) {
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <GPIO_u8PinInit+0x46>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d063      	beq.n	800027c <GPIO_u8PinInit+0x10c>
						GPIO_PORT_Arr[PinConfig->port]->CRH  |=((PinConfig->OutputType)<<((_u8BitNum*BIT_LOC_MUL)+2));
					}

					break;
				default:
					break;
 80001b4:	e0c5      	b.n	8000342 <GPIO_u8PinInit+0x1d2>
					GPIO_PORT_Arr[PinConfig->port]->CRL  &=((~CRL_CLEAR_MASK)<<_u8BitNum*BIT_LOC_MUL);
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	461a      	mov	r2, r3
 80001bc:	4b67      	ldr	r3, [pc, #412]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80001be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	7b7b      	ldrb	r3, [r7, #13]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	f06f 010f 	mvn.w	r1, #15
 80001cc:	fa01 f303 	lsl.w	r3, r1, r3
 80001d0:	4619      	mov	r1, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	4618      	mov	r0, r3
 80001d8:	4b60      	ldr	r3, [pc, #384]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80001da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80001de:	400a      	ands	r2, r1
 80001e0:	601a      	str	r2, [r3, #0]
					GPIO_PORT_Arr[PinConfig->port]->CRL  |=((PinConfig->Mode)<<_u8BitNum*BIT_LOC_MUL);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b5c      	ldr	r3, [pc, #368]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80001ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	789b      	ldrb	r3, [r3, #2]
 80001f4:	4619      	mov	r1, r3
 80001f6:	7b7b      	ldrb	r3, [r7, #13]
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	fa01 f303 	lsl.w	r3, r1, r3
 80001fe:	4619      	mov	r1, r3
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	4b55      	ldr	r3, [pc, #340]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000208:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800020c:	430a      	orrs	r2, r1
 800020e:	601a      	str	r2, [r3, #0]
					if (PinConfig->Mode==INPUT)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	789b      	ldrb	r3, [r3, #2]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d118      	bne.n	800024a <GPIO_u8PinInit+0xda>
						GPIO_PORT_Arr[PinConfig->port]->CRL  |=((PinConfig->InputType)<<((_u8BitNum*BIT_LOC_MUL)+2));
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	461a      	mov	r2, r3
 800021e:	4b4f      	ldr	r3, [pc, #316]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	791b      	ldrb	r3, [r3, #4]
 800022a:	4619      	mov	r1, r3
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	3302      	adds	r3, #2
 8000232:	fa01 f303 	lsl.w	r3, r1, r3
 8000236:	4619      	mov	r1, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	4b47      	ldr	r3, [pc, #284]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000240:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000244:	430a      	orrs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
					break;
 8000248:	e07b      	b.n	8000342 <GPIO_u8PinInit+0x1d2>
						GPIO_PORT_Arr[PinConfig->port]->CRL  |=((PinConfig->OutputType)<<((_u8BitNum*BIT_LOC_MUL)+2));
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	461a      	mov	r2, r3
 8000250:	4b42      	ldr	r3, [pc, #264]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	78db      	ldrb	r3, [r3, #3]
 800025c:	4619      	mov	r1, r3
 800025e:	7b7b      	ldrb	r3, [r7, #13]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	3302      	adds	r3, #2
 8000264:	fa01 f303 	lsl.w	r3, r1, r3
 8000268:	4619      	mov	r1, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	4618      	mov	r0, r3
 8000270:	4b3a      	ldr	r3, [pc, #232]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000272:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000276:	430a      	orrs	r2, r1
 8000278:	601a      	str	r2, [r3, #0]
					break;
 800027a:	e062      	b.n	8000342 <GPIO_u8PinInit+0x1d2>
					GPIO_PORT_Arr[PinConfig->port]->CRH  &=((~CRL_CLEAR_MASK)<<_u8BitNum*BIT_LOC_MUL);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	4b36      	ldr	r3, [pc, #216]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000288:	685a      	ldr	r2, [r3, #4]
 800028a:	7b7b      	ldrb	r3, [r7, #13]
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	f06f 010f 	mvn.w	r1, #15
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	4619      	mov	r1, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	4b2f      	ldr	r3, [pc, #188]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80002a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002a4:	400a      	ands	r2, r1
 80002a6:	605a      	str	r2, [r3, #4]
					GPIO_PORT_Arr[PinConfig->port]->CRH  |=((PinConfig->Mode)<<_u8BitNum*BIT_LOC_MUL);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b2b      	ldr	r3, [pc, #172]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80002b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	4619      	mov	r1, r3
 80002bc:	7b7b      	ldrb	r3, [r7, #13]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	fa01 f303 	lsl.w	r3, r1, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80002ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	605a      	str	r2, [r3, #4]
					if (PinConfig->Mode==INPUT)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d118      	bne.n	8000310 <GPIO_u8PinInit+0x1a0>
						GPIO_PORT_Arr[PinConfig->port]->CRH  |=((PinConfig->InputType)<<((_u8BitNum*BIT_LOC_MUL)+2));
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <GPIO_u8PinInit+0x1ec>)
 80002e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	791b      	ldrb	r3, [r3, #4]
 80002f0:	4619      	mov	r1, r3
 80002f2:	7b7b      	ldrb	r3, [r7, #13]
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	3302      	adds	r3, #2
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4618      	mov	r0, r3
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000306:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800030a:	430a      	orrs	r2, r1
 800030c:	605a      	str	r2, [r3, #4]
					break;
 800030e:	e017      	b.n	8000340 <GPIO_u8PinInit+0x1d0>
						GPIO_PORT_Arr[PinConfig->port]->CRH  |=((PinConfig->OutputType)<<((_u8BitNum*BIT_LOC_MUL)+2));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	78db      	ldrb	r3, [r3, #3]
 8000322:	4619      	mov	r1, r3
 8000324:	7b7b      	ldrb	r3, [r7, #13]
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	3302      	adds	r3, #2
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <GPIO_u8PinInit+0x1ec>)
 8000338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800033c:	430a      	orrs	r2, r1
 800033e:	605a      	str	r2, [r3, #4]
					break;
 8000340:	bf00      	nop
		{
 8000342:	e004      	b.n	800034e <GPIO_u8PinInit+0x1de>
			}

		}
		else 
		{
			local_u8ErrorState =STD_TYPES_NOK;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
 8000348:	e001      	b.n	800034e <GPIO_u8PinInit+0x1de>
		}
	}
	else 
	{
		local_u8ErrorState = ERROR_NULL_PTR;
 800034a:	2302      	movs	r3, #2
 800034c:	73fb      	strb	r3, [r7, #15]

	}
	
	return local_u8ErrorState;
 800034e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000

08000360 <GPIO_u8SetPinValue>:
*   @param [in]  PinNum   : to select the number of the pin
*   @param [in]  PinStatus: to select the status HIGH or LOW
*   @retval errtorStatus
*/
uint8_t GPIO_u8SetPinValue(Port_t Port ,Pin_t PinNum , PinStatus_t  PinStatus)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	460b      	mov	r3, r1
 800036c:	71bb      	strb	r3, [r7, #6]
 800036e:	4613      	mov	r3, r2
 8000370:	717b      	strb	r3, [r7, #5]
	uint8_t  local_u8ErrorState = STD_TYPES_OK;
 8000372:	2301      	movs	r3, #1
 8000374:	73fb      	strb	r3, [r7, #15]

		if ((Port < NUM_OF_PORTS)&&(PinNum < NUM_OF_PINS))
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b05      	cmp	r3, #5
 800037a:	d81f      	bhi.n	80003bc <GPIO_u8SetPinValue+0x5c>
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b0f      	cmp	r3, #15
 8000380:	d81c      	bhi.n	80003bc <GPIO_u8SetPinValue+0x5c>
		{

				switch (PinStatus)
 8000382:	797b      	ldrb	r3, [r7, #5]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d00b      	beq.n	80003a0 <GPIO_u8SetPinValue+0x40>
 8000388:	2b01      	cmp	r3, #1
 800038a:	d113      	bne.n	80003b4 <GPIO_u8SetPinValue+0x54>
				{
					case HIGH:
						 GPIO_PORT_Arr[Port]->BSRR=SET_VALUE<<PinNum;
 800038c:	79ba      	ldrb	r2, [r7, #6]
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	490e      	ldr	r1, [pc, #56]	; (80003cc <GPIO_u8SetPinValue+0x6c>)
 8000392:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000396:	2101      	movs	r1, #1
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	611a      	str	r2, [r3, #16]
						break;
 800039e:	e00c      	b.n	80003ba <GPIO_u8SetPinValue+0x5a>
					case LOW:
						 GPIO_PORT_Arr[Port]->BRR=SET_VALUE<<PinNum;
 80003a0:	79ba      	ldrb	r2, [r7, #6]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4909      	ldr	r1, [pc, #36]	; (80003cc <GPIO_u8SetPinValue+0x6c>)
 80003a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	615a      	str	r2, [r3, #20]
						break;
 80003b2:	e002      	b.n	80003ba <GPIO_u8SetPinValue+0x5a>
					default:
					     local_u8ErrorState=STD_TYPES_NOK;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
						break;
 80003b8:	bf00      	nop
				switch (PinStatus)
 80003ba:	e001      	b.n	80003c0 <GPIO_u8SetPinValue+0x60>
				}
		}
		else
		{
			local_u8ErrorState=STD_TYPES_NOK;
 80003bc:	2300      	movs	r3, #0
 80003be:	73fb      	strb	r3, [r7, #15]
		}
		return local_u8ErrorState;
 80003c0:	7bfb      	ldrb	r3, [r7, #15]

}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	20000000 	.word	0x20000000

080003d0 <MRCC_setClockSts>:
 *
 * Returns:
 *   - 8-bit unsigned integer indicating success or failure
 */
uint8_t MRCC_setClockSts(clk_t clk   , Status_t  status)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	71bb      	strb	r3, [r7, #6]
	uint32 timeout_count=0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
/********************************* HSE Enable Or Disable *******************/
	switch (clk) {
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d05d      	beq.n	80004a6 <MRCC_setClockSts+0xd6>
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	f300 8086 	bgt.w	80004fc <MRCC_setClockSts+0x12c>
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d02d      	beq.n	8000450 <MRCC_setClockSts+0x80>
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 8081 	bne.w	80004fc <MRCC_setClockSts+0x12c>
		case CLK_HSE:
			 if (status==ENABLE)
 80003fa:	79bb      	ldrb	r3, [r7, #6]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d11b      	bne.n	8000438 <MRCC_setClockSts+0x68>
			 {
              SET_BIT(RCC->CR,RCC_CR_HSEON 	);
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <MRCC_setClockSts+0x148>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a44      	ldr	r2, [pc, #272]	; (8000518 <MRCC_setClockSts+0x148>)
 8000406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800040a:	6013      	str	r3, [r2, #0]
              while ((GET_BIT(RCC->CR,RCC_CR_HSERDY)==0) && timeout_count<TIMEOUT)
 800040c:	e002      	b.n	8000414 <MRCC_setClockSts+0x44>
              {
            	  timeout_count++;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
              while ((GET_BIT(RCC->CR,RCC_CR_HSERDY)==0) && timeout_count<TIMEOUT)
 8000414:	4b40      	ldr	r3, [pc, #256]	; (8000518 <MRCC_setClockSts+0x148>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d104      	bne.n	800042a <MRCC_setClockSts+0x5a>
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f242 720f 	movw	r2, #9999	; 0x270f
 8000426:	4293      	cmp	r3, r2
 8000428:	d9f1      	bls.n	800040e <MRCC_setClockSts+0x3e>
              }

					  if (timeout_count>=TIMEOUT)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000430:	4293      	cmp	r3, r2
 8000432:	d965      	bls.n	8000500 <MRCC_setClockSts+0x130>
					  {
						  return STD_TYPES_NOK;
 8000434:	2300      	movs	r3, #0
 8000436:	e069      	b.n	800050c <MRCC_setClockSts+0x13c>
					  }

			 }
			 else if (status==DISABLE)
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d106      	bne.n	800044c <MRCC_setClockSts+0x7c>
			 {
			    CLEAR_BIT(RCC->CR,RCC_CR_HSEON );
 800043e:	4b36      	ldr	r3, [pc, #216]	; (8000518 <MRCC_setClockSts+0x148>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a35      	ldr	r2, [pc, #212]	; (8000518 <MRCC_setClockSts+0x148>)
 8000444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000448:	6013      	str	r3, [r2, #0]
			 else
			 {
				 return STD_TYPES_NOK;
			 }

			break;
 800044a:	e059      	b.n	8000500 <MRCC_setClockSts+0x130>
				 return STD_TYPES_NOK;
 800044c:	2300      	movs	r3, #0
 800044e:	e05d      	b.n	800050c <MRCC_setClockSts+0x13c>
/********************************* HSI Enable Or Disable *******************/
		case CLK_HSI:
			 if (status==ENABLE)
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d11b      	bne.n	800048e <MRCC_setClockSts+0xbe>
			 {
             SET_BIT(RCC->CR,RCC_CR_HSION 	);
 8000456:	4b30      	ldr	r3, [pc, #192]	; (8000518 <MRCC_setClockSts+0x148>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <MRCC_setClockSts+0x148>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]
             while ((GET_BIT(RCC->CR,RCC_CR_HSIRDY)==0) && timeout_count<TIMEOUT)
 8000462:	e002      	b.n	800046a <MRCC_setClockSts+0x9a>
             {
           	  timeout_count++;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
             while ((GET_BIT(RCC->CR,RCC_CR_HSIRDY)==0) && timeout_count<TIMEOUT)
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <MRCC_setClockSts+0x148>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	2b00      	cmp	r3, #0
 8000474:	d104      	bne.n	8000480 <MRCC_setClockSts+0xb0>
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f242 720f 	movw	r2, #9999	; 0x270f
 800047c:	4293      	cmp	r3, r2
 800047e:	d9f1      	bls.n	8000464 <MRCC_setClockSts+0x94>
             }
                        if (timeout_count>=TIMEOUT)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f242 720f 	movw	r2, #9999	; 0x270f
 8000486:	4293      	cmp	r3, r2
 8000488:	d93c      	bls.n	8000504 <MRCC_setClockSts+0x134>
           				 {
           					 return STD_TYPES_NOK;
 800048a:	2300      	movs	r3, #0
 800048c:	e03e      	b.n	800050c <MRCC_setClockSts+0x13c>
           		     	  }


			 }
			 else if (status==DISABLE)
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d106      	bne.n	80004a2 <MRCC_setClockSts+0xd2>
			 {
			   CLEAR_BIT(RCC->CR,RCC_CR_HSION );
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <MRCC_setClockSts+0x148>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <MRCC_setClockSts+0x148>)
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]
			 }
			 else
			 {
                return STD_TYPES_NOK;
			 }
			break;
 80004a0:	e030      	b.n	8000504 <MRCC_setClockSts+0x134>
                return STD_TYPES_NOK;
 80004a2:	2300      	movs	r3, #0
 80004a4:	e032      	b.n	800050c <MRCC_setClockSts+0x13c>
/********************************* PLL Enable Or Disable *******************/
		case CLK_PLL:
			 if (status==ENABLE)
 80004a6:	79bb      	ldrb	r3, [r7, #6]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d11b      	bne.n	80004e4 <MRCC_setClockSts+0x114>
			 {
            SET_BIT(RCC->CR,RCC_CR_PLLON 	);
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <MRCC_setClockSts+0x148>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a19      	ldr	r2, [pc, #100]	; (8000518 <MRCC_setClockSts+0x148>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b6:	6013      	str	r3, [r2, #0]
            while ((GET_BIT(RCC->CR,RCC_CR_PLLRDY)==0) && timeout_count<TIMEOUT)
 80004b8:	e002      	b.n	80004c0 <MRCC_setClockSts+0xf0>
            {
          	  timeout_count++;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	60fb      	str	r3, [r7, #12]
            while ((GET_BIT(RCC->CR,RCC_CR_PLLRDY)==0) && timeout_count<TIMEOUT)
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <MRCC_setClockSts+0x148>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d104      	bne.n	80004d6 <MRCC_setClockSts+0x106>
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d9f1      	bls.n	80004ba <MRCC_setClockSts+0xea>
            }
                       if (timeout_count>=TIMEOUT)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80004dc:	4293      	cmp	r3, r2
 80004de:	d913      	bls.n	8000508 <MRCC_setClockSts+0x138>
          				 {
          					 return STD_TYPES_NOK;
 80004e0:	2300      	movs	r3, #0
 80004e2:	e013      	b.n	800050c <MRCC_setClockSts+0x13c>
          		     	  }


			 }
			 else if (status==DISABLE)
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d106      	bne.n	80004f8 <MRCC_setClockSts+0x128>
			 {
			   CLEAR_BIT(RCC->CR,RCC_CR_PLLON );
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MRCC_setClockSts+0x148>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <MRCC_setClockSts+0x148>)
 80004f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004f4:	6013      	str	r3, [r2, #0]
			 else
			 {
               return STD_TYPES_NOK;
			 }

			break;
 80004f6:	e007      	b.n	8000508 <MRCC_setClockSts+0x138>
               return STD_TYPES_NOK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	e007      	b.n	800050c <MRCC_setClockSts+0x13c>
		default: return STD_TYPES_NOK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	e005      	b.n	800050c <MRCC_setClockSts+0x13c>
			break;
 8000500:	bf00      	nop
 8000502:	e002      	b.n	800050a <MRCC_setClockSts+0x13a>
			break;
 8000504:	bf00      	nop
 8000506:	e000      	b.n	800050a <MRCC_setClockSts+0x13a>
			break;
 8000508:	bf00      	nop



	}
	return STD_TYPES_OK;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <MRCC_setSystemClk>:
 * Returns:
 *   - 8-bit unsigned integer indicating success or failure
 */

uint8_t MRCC_setSystemClk(clk_t clk )
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
   switch (clk) {
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d020      	beq.n	800056e <MRCC_setSystemClk+0x52>
 800052c:	2b02      	cmp	r3, #2
 800052e:	dc2b      	bgt.n	8000588 <MRCC_setSystemClk+0x6c>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <MRCC_setSystemClk+0x1e>
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00d      	beq.n	8000554 <MRCC_setSystemClk+0x38>
 8000538:	e026      	b.n	8000588 <MRCC_setSystemClk+0x6c>
	case CLK_HSI:
		CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MRCC_setSystemClk+0x7c>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	4a16      	ldr	r2, [pc, #88]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000540:	f023 0301 	bic.w	r3, r3, #1
 8000544:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW2);
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	4a13      	ldr	r2, [pc, #76]	; (8000598 <MRCC_setSystemClk+0x7c>)
 800054c:	f023 0302 	bic.w	r3, r3, #2
 8000550:	6053      	str	r3, [r2, #4]
		break;
 8000552:	e01b      	b.n	800058c <MRCC_setSystemClk+0x70>
	case CLK_HSE:
		SET_BIT(RCC->CFGR,RCC_CFGR_SW1);
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <MRCC_setSystemClk+0x7c>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW2);
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000566:	f023 0302 	bic.w	r3, r3, #2
 800056a:	6053      	str	r3, [r2, #4]
		break;
 800056c:	e00e      	b.n	800058c <MRCC_setSystemClk+0x70>
	case CLK_PLL:
		CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	4a09      	ldr	r2, [pc, #36]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000574:	f023 0301 	bic.w	r3, r3, #1
 8000578:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR,RCC_CFGR_SW2);
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <MRCC_setSystemClk+0x7c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <MRCC_setSystemClk+0x7c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6053      	str	r3, [r2, #4]
		break;
 8000586:	e001      	b.n	800058c <MRCC_setSystemClk+0x70>
	default:return STD_TYPES_NOK;
 8000588:	2300      	movs	r3, #0
 800058a:	e000      	b.n	800058e <MRCC_setSystemClk+0x72>
}

  return STD_TYPES_OK;
 800058c:	2301      	movs	r3, #1
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000

0800059c <MRCC_APB2_EnablePeripheralClk>:
	   _GPIOC     ,_GPIOD     ,_GPIOE     ,
	   _ADC1      ,_ADC2      ,_TIM1     ,
	   _SPI1      ,_USART1    ,
 */
void MRCC_APB2_EnablePeripheralClk(APB2_Peripheral_t Peripheral)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB2ENR,Peripheral);
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <MRCC_APB2_EnablePeripheralClk+0x28>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	2101      	movs	r1, #1
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <MRCC_APB2_EnablePeripheralClk+0x28>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6193      	str	r3, [r2, #24]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000

080005c8 <SysTick_Init>:
#include "Systick_Interface.h"



void SysTick_Init(uint32 Copy_u32Ticks)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	/*Disable SysTick counter */
	CLEAR_BIT(SysTick->CTRL ,SysTick_CTRL_ENABLE_Pos);
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <SysTick_Init+0x44>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <SysTick_Init+0x44>)
 80005d6:	f023 0301 	bic.w	r3, r3, #1
 80005da:	6013      	str	r3, [r2, #0]
	/*Set reload REG */
	SysTick->LOAD=Copy_u32Ticks;
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <SysTick_Init+0x44>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6053      	str	r3, [r2, #4]
	/*Reset The sysTick counter value */
	SysTick->VAL=1;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <SysTick_Init+0x44>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	609a      	str	r2, [r3, #8]
	/*select the clock */
#if (STK_CLK==STK_AHB_CLK_DIV_BY_8)
	SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SysTick_Init+0x44>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SysTick_Init+0x44>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6013      	str	r3, [r2, #0]
#else
#error "Invalid clock source"
#endif

	/*Disable SysTick IRQ*/
	CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <SysTick_Init+0x44>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <SysTick_Init+0x44>)
 80005fa:	f023 0302 	bic.w	r3, r3, #2
 80005fe:	6013      	str	r3, [r2, #0]

}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e010 	.word	0xe000e010

08000610 <SysTick_voidBusyWait_ms>:
	SET_BIT(SysTick->CTRL,ENABLE);
	while(GET_BIT(SysTick->CTRL,COUNT_FLAG)==0);

}
void SysTick_voidBusyWait_ms(uint32 Copyu32NumOfTicks)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	SysTick->LOAD=Copyu32NumOfTicks*ms_TO_us;
 8000618:	4a12      	ldr	r2, [pc, #72]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000620:	fb01 f303 	mul.w	r3, r1, r3
 8000624:	6053      	str	r3, [r2, #4]
	/*Enable SysTick counter */
	SET_BIT(SysTick->CTRL ,SysTick_CTRL_ENABLE_Pos);
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]
	while (GET_BIT(SysTick->CTRL ,SysTick_CTRL_COUNTFLAG_Pos)==0);
 8000632:	bf00      	nop
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f9      	beq.n	8000634 <SysTick_voidBusyWait_ms+0x24>
	/*Disable SysTick counter */
	CLEAR_BIT(SysTick->CTRL ,SysTick_CTRL_ENABLE_Pos);
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]
	/*ReSet reload REG */
	SysTick->LOAD=0;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
    /*Reset The sysTick counter value */
	SysTick->VAL=1;
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <SysTick_voidBusyWait_ms+0x54>)
 8000654:	2201      	movs	r2, #1
 8000656:	609a      	str	r2, [r3, #8]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010

08000668 <main>:
#endif



int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0

	MRCC_setSystemClk(CLK_HSI);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff54 	bl	800051c <MRCC_setSystemClk>
	MRCC_setClockSts(CLK_HSI, ENABLE);
 8000674:	2101      	movs	r1, #1
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff feaa 	bl	80003d0 <MRCC_setClockSts>
	MRCC_APB2_EnablePeripheralClk(_GPIOA);
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff ff8d 	bl	800059c <MRCC_APB2_EnablePeripheralClk>
	MRCC_APB2_EnablePeripheralClk(_GPIOB);
 8000682:	2003      	movs	r0, #3
 8000684:	f7ff ff8a 	bl	800059c <MRCC_APB2_EnablePeripheralClk>
	MRCC_APB2_EnablePeripheralClk(_GPIOC);
 8000688:	2004      	movs	r0, #4
 800068a:	f7ff ff87 	bl	800059c <MRCC_APB2_EnablePeripheralClk>

	SysTick_Init(10);
 800068e:	200a      	movs	r0, #10
 8000690:	f7ff ff9a 	bl	80005c8 <SysTick_Init>
	//LCD_Init();


	GPIO_PinConfig_t  pinConfigLed1={
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	711a      	strb	r2, [r3, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80006a4:	2302      	movs	r3, #2
 80006a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		.PinNum= PIN2,
		.Mode =OUTPUT_2MHZ,
		.OutputType=  OP_PUSH_PULL
	};

	GPIO_u8PinInit(&pinConfigLed1);
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd5e 	bl	8000170 <GPIO_u8PinInit>

	GPIO_PinConfig_t  pinConfigRed2={
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
 80006be:	2301      	movs	r3, #1
 80006c0:	767b      	strb	r3, [r7, #25]
 80006c2:	2302      	movs	r3, #2
 80006c4:	76bb      	strb	r3, [r7, #26]
		.PinNum= PIN1,
		.Mode =OUTPUT_2MHZ,
		.OutputType=  OP_PUSH_PULL
	};

	GPIO_u8PinInit(&pinConfigRed2);
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd50 	bl	8000170 <GPIO_u8PinInit>



	GPIO_PinConfig_t  pinConfigLed3={
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	711a      	strb	r2, [r3, #4]
 80006da:	2302      	movs	r3, #2
 80006dc:	743b      	strb	r3, [r7, #16]
 80006de:	230f      	movs	r3, #15
 80006e0:	747b      	strb	r3, [r7, #17]
 80006e2:	2302      	movs	r3, #2
 80006e4:	74bb      	strb	r3, [r7, #18]
			.PinNum= PIN15,
			.Mode =OUTPUT_2MHZ,
			.OutputType=  OP_PUSH_PULL
		};

		GPIO_u8PinInit(&pinConfigLed3);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd40 	bl	8000170 <GPIO_u8PinInit>


	GPIO_PinConfig_t  pinConfigLed4={
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	711a      	strb	r2, [r3, #4]
 80006fa:	2302      	movs	r3, #2
 80006fc:	723b      	strb	r3, [r7, #8]
 80006fe:	230e      	movs	r3, #14
 8000700:	727b      	strb	r3, [r7, #9]
 8000702:	2302      	movs	r3, #2
 8000704:	72bb      	strb	r3, [r7, #10]
				.PinNum= PIN14,
				.Mode =OUTPUT_2MHZ,
				.OutputType=  OP_PUSH_PULL
			};

			GPIO_u8PinInit(&pinConfigLed4);
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd30 	bl	8000170 <GPIO_u8PinInit>

	GPIO_PinConfig_t  pinConfigLed5={
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	711a      	strb	r2, [r3, #4]
 8000718:	2302      	movs	r3, #2
 800071a:	703b      	strb	r3, [r7, #0]
 800071c:	230d      	movs	r3, #13
 800071e:	707b      	strb	r3, [r7, #1]
 8000720:	2302      	movs	r3, #2
 8000722:	70bb      	strb	r3, [r7, #2]
				.PinNum= PIN13,
				.Mode =OUTPUT_2MHZ,
				.OutputType=  OP_PUSH_PULL
			};

			GPIO_u8PinInit(&pinConfigLed5);
 8000724:	463b      	mov	r3, r7
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd22 	bl	8000170 <GPIO_u8PinInit>

    /* Loop forever */
	while(1)
	{
		GPIO_u8SetPinValue(PORTA, PIN1, HIGH);
 800072c:	2201      	movs	r2, #1
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fe15 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTA, PIN2, HIGH);
 8000736:	2201      	movs	r2, #1
 8000738:	2102      	movs	r1, #2
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fe10 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTC, PIN13, HIGH);
 8000740:	2201      	movs	r2, #1
 8000742:	210d      	movs	r1, #13
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff fe0b 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTC, PIN14, HIGH);
 800074a:	2201      	movs	r2, #1
 800074c:	210e      	movs	r1, #14
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff fe06 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTC, PIN15, HIGH);
 8000754:	2201      	movs	r2, #1
 8000756:	210f      	movs	r1, #15
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe01 	bl	8000360 <GPIO_u8SetPinValue>
		SysTick_voidBusyWait_ms(10000);
 800075e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000762:	f7ff ff55 	bl	8000610 <SysTick_voidBusyWait_ms>
		GPIO_u8SetPinValue(PORTA, PIN1, LOW);
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff fdf8 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTA, PIN2, LOW);
 8000770:	2200      	movs	r2, #0
 8000772:	2102      	movs	r1, #2
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fdf3 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTC, PIN13, LOW);
 800077a:	2200      	movs	r2, #0
 800077c:	210d      	movs	r1, #13
 800077e:	2002      	movs	r0, #2
 8000780:	f7ff fdee 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTC, PIN14, LOW);
 8000784:	2200      	movs	r2, #0
 8000786:	210e      	movs	r1, #14
 8000788:	2002      	movs	r0, #2
 800078a:	f7ff fde9 	bl	8000360 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(PORTC, PIN15, LOW);
 800078e:	2200      	movs	r2, #0
 8000790:	210f      	movs	r1, #15
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fde4 	bl	8000360 <GPIO_u8SetPinValue>
        SysTick_voidBusyWait_ms(10000);
 8000798:	f242 7010 	movw	r0, #10000	; 0x2710
 800079c:	f7ff ff38 	bl	8000610 <SysTick_voidBusyWait_ms>
		GPIO_u8SetPinValue(PORTA, PIN1, HIGH);
 80007a0:	e7c4      	b.n	800072c <main+0xc4>
	...

080007a4 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	; (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d2:	f000 f811 	bl	80007f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff ff47 	bl	8000668 <main>

080007da <LoopForever>:

LoopForever:
  b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80007e8:	08000860 	.word	0x08000860
  ldr r2, =_sbss
 80007ec:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80007f0:	20000034 	.word	0x20000034

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <__libc_init_array>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	2600      	movs	r6, #0
 80007fc:	4d0c      	ldr	r5, [pc, #48]	; (8000830 <__libc_init_array+0x38>)
 80007fe:	4c0d      	ldr	r4, [pc, #52]	; (8000834 <__libc_init_array+0x3c>)
 8000800:	1b64      	subs	r4, r4, r5
 8000802:	10a4      	asrs	r4, r4, #2
 8000804:	42a6      	cmp	r6, r4
 8000806:	d109      	bne.n	800081c <__libc_init_array+0x24>
 8000808:	f000 f81a 	bl	8000840 <_init>
 800080c:	2600      	movs	r6, #0
 800080e:	4d0a      	ldr	r5, [pc, #40]	; (8000838 <__libc_init_array+0x40>)
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <__libc_init_array+0x44>)
 8000812:	1b64      	subs	r4, r4, r5
 8000814:	10a4      	asrs	r4, r4, #2
 8000816:	42a6      	cmp	r6, r4
 8000818:	d105      	bne.n	8000826 <__libc_init_array+0x2e>
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000820:	4798      	blx	r3
 8000822:	3601      	adds	r6, #1
 8000824:	e7ee      	b.n	8000804 <__libc_init_array+0xc>
 8000826:	f855 3b04 	ldr.w	r3, [r5], #4
 800082a:	4798      	blx	r3
 800082c:	3601      	adds	r6, #1
 800082e:	e7f2      	b.n	8000816 <__libc_init_array+0x1e>
 8000830:	08000858 	.word	0x08000858
 8000834:	08000858 	.word	0x08000858
 8000838:	08000858 	.word	0x08000858
 800083c:	0800085c 	.word	0x0800085c

08000840 <_init>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	bf00      	nop
 8000844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000846:	bc08      	pop	{r3}
 8000848:	469e      	mov	lr, r3
 800084a:	4770      	bx	lr

0800084c <_fini>:
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	bf00      	nop
 8000850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000852:	bc08      	pop	{r3}
 8000854:	469e      	mov	lr, r3
 8000856:	4770      	bx	lr
